name: Install MDAnalysis
description: Install MDAnalysis
inputs:
  version:
    description: >
      Version of MDAnalysis to install.
      Can be a specified version (e.g. 2.0.0),
      "develop", or "latest".
    required: true
    default: latest
  install-tests:
    description: Whether to install MDAnalysisTests
    required: true
    default: false
  installer:
    description: >
      Installer to use.
      Must be one of pip, conda, or mamba.
    required: true
    default: pip
  shell:
    description: >
      Which shell to use.
      If you have a conda environment, you should
      use `bash -l {0}`.
      If you are using pip, you should use `bash`,
      as `bash -l {0}` can fail on Mac runners.
    required: true
    default: bash
outputs:
  installed-version:
    description: Installed MDAnalysis version
    value: "${{ steps.print-version.outputs.installed-version }}"


runs:
  using: "composite"
  steps:
    - name: Uninstall pre-existing versions
      shell: ${{ inputs.shell }}
      run: |
        # uninstall tests even if not reinstalling,
        # as versions can clash
        python -m pip uninstall -y MDAnalysis MDAnalysisTests

    - name: Set installer
      id: setup-installer
      shell: ${{ inputs.shell }}
      run: |
        case ${{ inputs.installer }} in
            pip|conda|mamba) true ;;
            *)
              printf "${{ inputs.installer }} is not a valid installer; must be one of pip, conda, mamba"
              exit 1
              ;;
        esac

        INSTALLER="${{ inputs.installer }}"
        if [[ ${{ inputs.version }} == "develop" ]] ; then
          INSTALLER="pip"
        fi

        echo "::set-output name=installer::$(echo $INSTALLER)"


    - name: Setup install lines
      id: setup-install-line
      shell: ${{ inputs.shell }}
      run: |
        if [[ "${{ inputs.version }}" == "latest" ]] ; then
          _PACKAGE_SUFFIX=""
        else
          _PACKAGE_SUFFIX="==${{ inputs.version }}"
        fi
        
        _INSTALL_LINE="MDAnalysis${_PACKAGE_SUFFIX}"
        if [[ "${{ inputs.install-tests }}" == "true" ]] ; then
          _INSTALL_LINE="${_INSTALL_LINE} MDAnalysisTests${_PACKAGE_SUFFIX}"
        fi

        # special case develop
        if [[ "${{ inputs.version }}" == "develop" ]] ; then
          _INSTALL_LINE="'git+https://github.com/MDAnalysis/mdanalysis@develop#egg=MDAnalysis&subdirectory=package'"
          if [[ "${{ inputs.install-tests }}" == "true" ]] ; then
            _INSTALL_LINE="${_INSTALL_LINE} 'git+https://github.com/MDAnalysis/mdanalysis@develop#egg=MDAnalysisTests&subdirectory=testsuite'"
          fi
        fi

        echo "Install line: ${_INSTALL_LINE}"
        echo "::set-output name=install-line::$(echo $_INSTALL_LINE)"
    
    - name: Install with conda
      if: steps.setup-installer.outputs.installer != 'pip'
      shell: ${{ inputs.shell }}
      run: |
        ${{ inputs.installer }} install -y -c conda-forge ${{ steps.setup-install-line.outputs.install-line }}
        
        if [[ ${{ inputs.version }} == "latest" ]] ; then
          ${{ inputs.installer }} update -y -c conda-forge ${{ steps.setup-install-line.outputs.install-line }}
        fi

    - name: Install with pip
      if: steps.setup-installer.outputs.installer == 'pip'
      shell: ${{ inputs.shell }}
      run: |
        python -m pip install ${{ steps.setup-install-line.outputs.install-line }}

        if [[ ${{ inputs.version }} == "latest" ]] ; then
          python -m pip install --upgrade ${{ steps.setup-install-line.outputs.install-line }}
        fi

    - name: Get final version
      id: print-version
      shell: ${{ inputs.shell }}
      run: |
        pyver=$(python -c 'import MDAnalysis; print(MDAnalysis.__version__)')
        echo "::set-output name=installed-version::$(echo $pyver)"