name: Cookiecutter CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    # weekly tests
    - cron: "0 0 * * 0"

defaults:
  run:
    shell: bash
    
env:
    ARTIFACT_NAME: demo-mdakit-repos
    OUTPUT_DIRECTORY: /home/runner/example_outputs

jobs:
  generate-cookiecutter:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        last-n-minor-python-release: [2, 1, 0]

    steps:
      - uses: actions/checkout@v3

      - id: get-python-version
        uses: "./{{cookiecutter.repo_name}}/.github/actions/get-stable-python-version"
        with:
          last-n-minor-release: ${{ matrix.last-n-minor-python-release }}

      - name: Environment information
        run: |
          uname -a
          df -h
          ulimit -a
          echo "Using Python ${{ steps.get-python-version.outputs.stable-python-version }}"

      - name: Set up Python ${{ steps.get-python-version.outputs.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ steps.get-python-version.outputs.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install -U pyyaml cookiecutter

      - name: Run cookiecutter tests
        run: |
          if [[ ${{ matrix.os == 'ubuntu-latest' }} ]] ; then
            PYTEST_FLAGS="--keep-test-outputs $OUTPUT_DIRECTORY"
          fi
          pytest tests/ $PYTEST_FLAGS

      - name: Run cookie CI
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: ./.github/actions/run-cookie-ci
        with:
          source-directory: ${{ env.OUTPUT_DIRECTORY }}/TestMDAKit_with_condaforge-deps_and_ReadTheDocs

      - name: Upload artifact
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.last-n-minor-release == 0 }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.OUTPUT_DIRECTORY }}
          retention-days: 3

  update-repo-examples:
    # if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Make output directory
        run: mkdir $OUTPUT_DIRECTORY

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.OUTPUT_DIRECTORY }}

<<<<<<< HEAD
=======
      - name: Push to cookie repo
        uses: ./.github/actions/push-to-cookie
        with:
          source-directory: ${{ env.OUTPUT_DIRECTORY }}

      - name: Set up git
        env:
          GH_USER: github-actions
          GH_EMAIL: "github-action@users.noreply.github.com"
          GH_REPOSITORY: "github.com/${{ github.repository }}.git"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # dynamic vars
          BRANCH="${GITHUB_REF#refs/heads/}"
          REV=$(git rev-parse --short HEAD)

          # set up git
          git init
          git config user.name $GH_USER
          git config user.email $GH_EMAIL
          git remote add upstream "https://${GH_USER}:${GH_TOKEN}@${GH_REPOSITORY}"

          git fetch --depth 50 upstream $BRANCH main
          git reset upstream/main

          # update examples
          rm -rf examples/*
          mv ${{ env.OUTPUT_DIRECTORY }}/* examples/

          # push back to GitHub
    
          git diff-index --quiet HEAD -- || git commit -m "rebuilt examples from branch ${BRANCH} with sphinx at ${REV}"
          git push -q upstream HEAD:main

>>>>>>> oops, update workflow
