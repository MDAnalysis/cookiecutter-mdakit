name: Cookiecutter CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    # weekly tests
    - cron: "0 0 * * 0"

defaults:
  run:
    shell: bash

env:
  GH_USER: github-actions
  GH_EMAIL: "github-action@users.noreply.github.com"

jobs:
  main_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Environment information
        run: |
          uname -a
          df -h
          ulimit -a

          git config --global user.name $GH_USER
          git config --global user.email $GH_EMAIL
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install -U pyyaml cookiecutter pytest pytest-cov
      
      - name: Run tests
        run: |
          pytest tests


  generate-cookiecutter:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"]
        dependency_source:
          - key: 1
            value: "Prefer conda-forge over the default anaconda channel with pip fallback"
            name: "condaforge"
          - key: 2
            value: "Prefer default anaconda channel with pip fallback"
            name: "anaconda"
          - key: 3
            value: "Dependencies from pip only (no conda)"
            name: "pip"
        rtd:
          - key: 1
            value: "y"
          - key: 2
            value: "n"
        exclude:
          - os: macOS-latest
            python-version: "3.8"
          - os: macOS-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"

    env:
      # OUTPUT_DIR: ${HOME}/output_mdakits
      GITHUB_REPO_NAME: cookiecutter_example_deps-${{ matrix.dependency_source['name'] }}_rtd-${{ matrix.rtd['value'] }}
      TEST_REPO_NAME: "testmdakit_deps_${{ matrix.dependency_source['name'] }}_rtd_${{ matrix.rtd['value'] }}"
      ACTION_DIR: ".github/actions/${TEST_REPO_NAME}"
      RUN_OS: ${{ matrix.os }}
      RUN_ACT_TESTS: ${{ matrix.os == 'ubuntu-latest' && matrix.dependency_source['key'] == 1 }}
      UPLOAD_PR_ARTIFACT: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10' && github.event_name == 'pull_request' }}
      GITHUB_HOST_ACCOUNT: lilyminium
      


    steps:
      - uses: actions/checkout@v3

      - name: Environment information
        run: |
          uname -a
          df -h
          ulimit -a
          echo "Running act tests: ${RUN_ACT_TESTS}"
          echo "Test repo name: ${TEST_REPO_NAME}"
          echo "Uploading artifact: ${UPLOAD_PR_ARTIFACT}"

          OUTPUT_DIR=${HOME}/output_mdakits
          echo "Test repo output directory: $OUTPUT_DIR"

          echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV
          mkdir -p $OUTPUT_DIR

      - name: Set up git
        run: |
          git config --global user.name $GH_USER
          git config --global user.email $GH_EMAIL


      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install -U pyyaml cookiecutter

      - name: Construct cookiecutter
        run: |
          cookiecutter --verbose --output-dir $OUTPUT_DIR --no-input . \
            project_name=$TEST_REPO_NAME \
            repo_name=${GITHUB_REPO_NAME} \
            package_name=$TEST_REPO_NAME \
            github_username=github-actions-ci \
            github_host_account=$GITHUB_HOST_ACCOUNT \
            author_name="Github Actions CI" \
            author_email="github-action@users.noreply.github.com" \
            description="Test MDAKit repository: deps=${{ matrix.dependency_source }}, rtd=${{ matrix.rtd }}" \
            dependency_source="${{ matrix.dependency_source['value'] }}" \
            include_ReadTheDocs="${{ matrix.rtd['value'] }}"
      
      - name: Add origin
        if: ${{ env.RUN_ACT_TESTS == 'true' }}
        env:
          GH_USER: github-actions
          GH_EMAIL: "github-action@users.noreply.github.com"
          GH_REPOSITORY: "github.com/${{ env.GITHUB_HOST_ACCOUNT }}/${{ env.GITHUB_REPO_NAME }}.git"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ${OUTPUT_DIR}/${GITHUB_REPO_NAME}
          pwd
          git status
          git remote add origin "https://${GH_USER}:${GH_TOKEN}@${GH_REPOSITORY}"
          
      - name: Install act
        if: ${{ env.RUN_ACT_TESTS == 'true' }} 
        uses: actionsflow/setup-act@v1

      - name: Build Act image
        if: ${{ env.RUN_ACT_TESTS == 'true' }} 
        run: |
          docker build -t act-conda ./.github/workflows/image

      - name: Run cookiecutter CI
        if: ${{ env.RUN_ACT_TESTS == 'true' }}
        env:
          GH_USER: github-actions
          GH_EMAIL: "github-action@users.noreply.github.com"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ${OUTPUT_DIR}/${GITHUB_REPO_NAME}
          pwd
          git status

          act --job main_tests --platform ubuntu-latest=act-conda
          cd -

      # - name: Build from source
      #   run: |
      #     cd ${OUTPUT_DIR}/${GITHUB_REPO_NAME}
      #     pip install -e ".[test,doc]"
      #     cd -

      #     python -c "import MDAnalysis as mda; print(f'MDAnalysis version:', mda.__version__)"
      #     python -c "import ${TEST_REPO_NAME}; print('${TEST_REPO_NAME} version:', ${TEST_REPO_NAME}.__version__)"

      # - name: Deploy artifact
      #   if: ${{ env.UPLOAD_PR_ARTIFACT == 'true' }}
      #   run: |
      #     cd ${OUTPUT_DIR}/${GITHUB_REPO_NAME}
      #     git checkout -b pr-${{github.event.pull_request.number}}
      #     git push origin HEAD

      - name: Copy to examples
        if: github.event_name != 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPOSITORY: "github.com/${{ github.repository }}.git"
        run: |
          git remote add upstream "https://${GH_USER}:${GH_TOKEN}@${GH_REPOSITORY}"
          git fetch --depth 50 upstream
          git reset upstream/main

          cp -r ${OUTPUT_DIR}/* examples/

          git add examples/
          git diff-index --quiet HEAD -- || git commit -m "Updated examples"
          git push -q upstream HEAD



          
