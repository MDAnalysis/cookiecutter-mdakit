#!/usr/bin/env python

import argparse
from cookiecutter.main import cookiecutter

parser = argparse.ArgumentParser("Cookiecutter for MDAKits")

parser.add_argument(
    "--project-name",
    type=str,
    help="Project name you would write in words",
    required=False,
    default="MyMDAKit"
)
parser.add_argument(
    "--repo-name",
    type=str,
    help="Repository name used for directory names and URLs",
    required=False,
)
parser.add_argument(
    "--package-name",
    type=str,
    help="Package name used to install",
    required=False,
)
parser.add_argument(
    "--description",
    type=str,
    help="Description of your new project",
    default="",
    required=False,
)
parser.add_argument(
    "--github-username",
    type=str,
    help="Your GitHub username",
    required=True,
)
parser.add_argument(
    "--github-host-account",
    type=str,
    help="Your GitHub host account; this can be the same or different as your username",
    required=False,
)
parser.add_argument(
    "--author-name",
    type=str,
    help="Your name",
    required=False,
)
parser.add_argument(
    "--author-email",
    type=str,
    help="Your email address",
    required=False,
)
parser.add_argument(
    "--dependency-source",
    choices=["conda-forge", "anaconda", "pip"],
    help=(
        "Source to choose for dependencies. "
        "'conda-forge' prefers conda-forge over the default anaconda channel with pip fallback. "
        "'anaconda' prefers default anaconda channel with pip fallback. "
        "'pip' uses dependencies from pip only (no conda)"
    ),
    default="conda-forge",
    required=False,
)
parser.add_argument(
    "--without-ReadTheDocs",
    action="store_true",
    help="Do not include ReadTheDocs support",
    required=False,
)
parser.add_argument(
    "--template_analysis_class",
    type=str,
    help="Name of the analysis class to use in the template",
    required=False,
    default=""
)
parser.add_argument(
    "--template",
    type=str,
    help="Template to use. Either a path to a directory, or URL to a cookiecutter template",
    default="https://github.com/MDAnalysis/cookiecutter-mdakit")
parser.add_argument(
    "--output-directory",
    type=str,
    help="Directory to create the cookie in",
    default=".")


def preprocess_kwargs(**kwargs):
    REPLACE_KEYS = {
        "dependency_source": "__dependency_source",
        "output_directory": "output_dir",
    }
    processed = {}
    for key, value in kwargs.items():
        if key == "without_ReadTheDocs":
            key = "include_ReadTheDocs"
            value = "n" if value else "y"

        if key in REPLACE_KEYS:
            key = REPLACE_KEYS[key]

        processed[key] = value
    return processed


def process_package_names(**kwargs):
    kwargs = dict(kwargs)
    if kwargs.get("project_name") is None:
        raise ValueError("Project name must be specified")
    if kwargs.get("repo_name") is None:
        kwargs["repo_name"] = kwargs["project_name"].replace(" ", "-")
    if kwargs.get("package_name") is None:
        kwargs["package_name"] = kwargs["repo_name"].replace("-", "_")
    if kwargs.get("description") is None:
        kwargs["description"] = kwargs["project_name"]
    return kwargs


def process_author_details(**kwargs):
    kwargs = dict(kwargs)
    if kwargs.get("github_username") is None:
        raise ValueError("GitHub username must be specified")
    if kwargs.get("github_host_account") is None:
        kwargs["github_host_account"] = kwargs["github_username"]
    if kwargs.get("author_name") is None:
        kwargs["author_name"] = kwargs["github_username"]
    if kwargs.get("author_email") is None:
        kwargs["author_email"] = f"{kwargs['github_username']}@users.noreply.github.com"
    return kwargs


def process_missing_kwargs(**kwargs):
    kwargs = dict(kwargs)
    kwargs = process_package_names(**kwargs)
    kwargs = process_author_details(**kwargs)
    return kwargs


def run_cookiecutter(**kwargs):
    COOKIECUTTER_KWARGS = ["output_dir"]
    cookiecutter_kwargs = {}
    extra_context = {}
    template = kwargs.pop("template")
    for key, value in kwargs.items():
        if key in COOKIECUTTER_KWARGS:
            cookiecutter_kwargs[key] = value
        else:
            extra_context[key] = value

    return cookiecutter(
        template,
        no_input=True,
        extra_context=extra_context,
        **cookiecutter_kwargs
    )


if __name__ == "__main__":
    args = parser.parse_args()
    kwargs = preprocess_kwargs(**vars(args))
    kwargs = process_missing_kwargs(**kwargs)
    run_cookiecutter(**kwargs)
